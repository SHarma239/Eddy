/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.FileDialog;
import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.EmptyStackException;
import java.util.Scanner;
import java.util.Stack;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;

/**
 *
 * @author HS
 */
 
 
public class XEdiTor extends javax.swing.JFrame {

    /**
     * Creates new form XEdiTor
     */
    private Stack<String> undoStack;
    private Stack<String> redoStack;
    private String helper;
    private boolean opened;
    private boolean saved;
    private String filePath;/**Can use Path Class 
    						*But Its functionality is Not Required*/
    public XEdiTor() {
        undoStack = new Stack<String>();
        redoStack = new Stack<String>();
        undoStack.push("");
        redoStack.push("");
        helper = "";
        opened  = false;
        saved = false;
        filePath = null;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        ThemeMenu = new javax.swing.JMenu();
        SetNimbusTheme = new javax.swing.JRadioButtonMenuItem();
        SetWindowsTheme = new javax.swing.JRadioButtonMenuItem();
        SetWindowsClassicTheme = new javax.swing.JRadioButtonMenuItem();
        SetMetalTheme = new javax.swing.JRadioButtonMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        NewOption = new javax.swing.JMenuItem();
        OpenOption = new javax.swing.JMenuItem();
        SaveOption = new javax.swing.JMenuItem();
        ExitOption = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        UndoOption = new javax.swing.JMenuItem();
        RedoOption = new javax.swing.JMenuItem();
        CutOption = new javax.swing.JMenuItem();
        CopyOption = new javax.swing.JMenuItem();
        PasteOption = new javax.swing.JMenuItem();
        DeleteOption = new javax.swing.JMenuItem();
        FindOption = new javax.swing.JMenuItem();
        CodeMenu = new javax.swing.JMenu();
        IndentOption = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        GetHelpOption = new javax.swing.JMenuItem();
        AboutMenu = new javax.swing.JMenu();
        AboutMe = new javax.swing.JMenuItem();

        ThemeMenu.setText("Themes");

        SetNimbusTheme.setSelected(true);
        SetNimbusTheme.setText("Nimbus");
        SetNimbusTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetNimbusThemeActionPerformed(evt);
            }
        });
        ThemeMenu.add(SetNimbusTheme);

        SetWindowsTheme.setSelected(true);
        SetWindowsTheme.setText("Windows");
        SetWindowsTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetWindowsThemeActionPerformed(evt);
            }
        });
        ThemeMenu.add(SetWindowsTheme);

        SetWindowsClassicTheme.setSelected(true);
        SetWindowsClassicTheme.setText("Windows Classic");
        SetWindowsClassicTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetWindowsClassicThemeActionPerformed(evt);
            }
        });
        ThemeMenu.add(SetWindowsClassicTheme);

        SetMetalTheme.setSelected(true);
        SetMetalTheme.setText("Metal");
        SetMetalTheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetMetalThemeActionPerformed(evt);
            }
        });
        ThemeMenu.add(SetMetalTheme);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XEdiTor by HS");
        setAutoRequestFocus(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        FileMenu.setText("File");

        NewOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        NewOption.setText("New");
        NewOption.setRequestFocusEnabled(false);
        NewOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewOptionActionPerformed(evt);
            }
        });
        FileMenu.add(NewOption);

        OpenOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        OpenOption.setText("Open");
        OpenOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenOptionActionPerformed(evt);
            }
        });
        FileMenu.add(OpenOption);

        SaveOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveOption.setText("Save");
        SaveOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveOptionActionPerformed(evt);
            }
        });
        FileMenu.add(SaveOption);

        ExitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        ExitOption.setText("Exit");
        ExitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitOptionActionPerformed(evt);
            }
        });
        FileMenu.add(ExitOption);

        jMenuBar1.add(FileMenu);

        EditMenu.setText("Edit");

        UndoOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        UndoOption.setText("Undo");
        UndoOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoOptionActionPerformed(evt);
            }
        });
        EditMenu.add(UndoOption);

        RedoOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        RedoOption.setText("Redo");
        RedoOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedoOptionActionPerformed(evt);
            }
        });
        EditMenu.add(RedoOption);

        CutOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        CutOption.setText("Cut");
        CutOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutOptionActionPerformed(evt);
            }
        });
        EditMenu.add(CutOption);

        CopyOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        CopyOption.setText("Copy");
        CopyOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyOptionActionPerformed(evt);
            }
        });
        EditMenu.add(CopyOption);

        PasteOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        PasteOption.setText("Paste");
        PasteOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteOptionActionPerformed(evt);
            }
        });
        EditMenu.add(PasteOption);

        DeleteOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        DeleteOption.setText("Delete");
        DeleteOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteOptionActionPerformed(evt);
            }
        });
        EditMenu.add(DeleteOption);

        FindOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        FindOption.setText("Find");
        FindOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FindOptionActionPerformed(evt);
            }
        });
        EditMenu.add(FindOption);

        jMenuBar1.add(EditMenu);

        CodeMenu.setText("Code");

        IndentOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        IndentOption.setText("Indent");
        IndentOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IndentOptionActionPerformed(evt);
            }
        });
        CodeMenu.add(IndentOption);

        jMenuBar1.add(CodeMenu);

        HelpMenu.setText("Help");
        HelpMenu.setComponentPopupMenu(jPopupMenu1);
        HelpMenu.add(jSeparator1);

        GetHelpOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        GetHelpOption.setText("Get Help");
        GetHelpOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetHelpOptionActionPerformed(evt);
            }
        });
        HelpMenu.add(GetHelpOption);

        jMenuBar1.add(HelpMenu);

        AboutMenu.setText("About");

        AboutMe.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        AboutMe.setText("About The Developer");
        AboutMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMeActionPerformed(evt);
            }
        });
        AboutMenu.add(AboutMe);

        jMenuBar1.add(AboutMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 716, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private boolean isOpened(){
    	return opened;
    }
    private boolean isSaved(){
    	return saved;
    }
    
    private void NewOptionActionPerformed(java.awt.event.ActionEvent evt) {                                          
        if(!isSaved()){
            int choice;
            choice = JOptionPane.showConfirmDialog(null, "Wish to save the current file","File Not Saved",JOptionPane.YES_NO_CANCEL_OPTION);
            if(choice == JOptionPane.YES_OPTION){
                    SaveOptionActionPerformed(evt);
            }
            else if(choice == JOptionPane.CANCEL_OPTION) {
                    return;
            }
    	}
    	this.dispose();
        new XEdiTor().setVisible(true);
    }                                         

    private void UndoOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String tmp;//change for backSpace and cut paste
        tmp = jTextArea1.getText();
        redoStack.push(tmp);
        try{
            jTextArea1.setText(undoStack.pop());
        }
        catch(EmptyStackException e){
            jTextArea1.setText("i think its throwing empty stack exception");
        }
    }                                          

    private void OpenOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        if(!isSaved()&&isOpened()){
            int choice;
            choice = JOptionPane.showConfirmDialog(null, "Wish to save the current file","File Not Saved",JOptionPane.YES_NO_CANCEL_OPTION);
            if(choice == JOptionPane.YES_OPTION){
                    SaveOptionActionPerformed(evt);
            }
            else if(choice == JOptionPane.CANCEL_OPTION) {
                    return;
            }
    	}
    	final FileDialog fileDialog = new FileDialog(this,"Select file",FileDialog.LOAD);
    	fileDialog.setFile("*.txt;*.cpp;*.java");
    	fileDialog.setVisible(true);
    	//JOptionPane box = new JOptionPane("File Selected :"  
        //+ fileDialog.getDirectory() + fileDialog.getFile(), JOptionPane.INFORMATION_MESSAGE);
    	//jTextArea1.setText("File Selected :-\nDirectory : "  
        //+ fileDialog.getDirectory() + "\nName : " + fileDialog.getFile());
        //this.setVisible(true);
    	try {
            FileInputStream inp = new FileInputStream(fileDialog.getDirectory()+fileDialog.getFile());
            filePath = fileDialog.getDirectory()+fileDialog.getFile();
            Scanner reader = new Scanner(inp);
            opened = true;
            jTextArea1.setText("");
            while(reader.hasNext()){
                    jTextArea1.setText(jTextArea1.getText() + reader.nextLine()+ "\n" );
            }
            reader.close();
            setTitle(fileDialog.getFile() + " XEdiTor by HS");
    	} catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null,"It seems that the selected file is missing", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }                                          

    private void SaveOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        File file;
    	FileDialog fileDialog = null ;
    	if(!isOpened()){
            //save AS
            fileDialog = new FileDialog(this,"Choose Location",FileDialog.SAVE);
            fileDialog.setFile("*.txt;*.cpp;*.java");
            fileDialog.setVisible(true);
            file  = new File(fileDialog.getDirectory()+fileDialog.getFile());
            filePath = fileDialog.getDirectory()+fileDialog.getFile();
            setTitle(fileDialog.getFile() + "  " + getTitle());
            try {
                if(!file.createNewFile()){
                        JOptionPane.showMessageDialog(null, "Can NOT SAVE","Error",JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                //e.printStackTrace();
            }
    	}
    	else{
    		file = new File(filePath);
    	}
    	try {
            FileWriter fout = new FileWriter(file);
            fout.write(jTextArea1.getText());
            fout.append("\n");
            fout.close();
            opened = true;
        } catch (IOException e) {
                //e.printStackTrace();
        }
    }                                          

    private void ExitOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          

    private void RedoOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        String tmp;//change for backSpace and cut paste
        tmp = jTextArea1.getText();
        undoStack.push(tmp);
        try{
            jTextArea1.setText(redoStack.pop());
        }
        catch(EmptyStackException e){
            jTextArea1.setText("");
        }
    }                                          

    private void CutOptionActionPerformed(java.awt.event.ActionEvent evt) {                                          
        String tmp = jTextArea1.getText();
        undoStack.push(tmp);
        helper = jTextArea1.getSelectedText();
        jTextArea1.replaceRange("", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
    }                                         

    private void CopyOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        helper = jTextArea1.getSelectedText();
    }                                          

    private void PasteOptionActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String tmp = jTextArea1.getText();
        undoStack.push(tmp);
        jTextArea1.insert(helper, jTextArea1.getCaretPosition());
    }                                           

    private void DeleteOptionActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String tmp = jTextArea1.getText();
        undoStack.push(tmp);
        jTextArea1.replaceRange("", jTextArea1.getSelectionStart(), jTextArea1.getSelectionEnd());
    }                                            

    private void FindOptionActionPerformed(java.awt.event.ActionEvent evt) {                                           
        /*JCheckBox checkbox = new JCheckBox("Do not show this message again.");
String message = "Are you sure you want to disconnect the selected products?";
Object[] params = {message, checkbox};
int n = JOptionPane.showConfirmDialog(view.propertiesDialog, params, "Disconnect Products", JOptionPane.YES_NO_OPTION);
boolean dontShow = checkbox.isSelected();*/
       String str="";
        //str =  JOptionPane.showInputDialog(frameInit(), "Enter text to be found : ", "Find",  JOptionPane.PLAIN_MESSAGE,null,null,"");
       // str=JOptionPane.showInputDialog("Enter text to be found : ", "Find");
        JCheckBox checkbox = new JCheckBox("Ignore Case");
        String message = "Enter text to be found : ";
        Object[] parameter = {message,checkbox};
        boolean FindStatus=true;
        //do{
        	str = JOptionPane.showInputDialog(null, parameter , "Find",JOptionPane.DEFAULT_OPTION);
        	
            String searchIn = jTextArea1.getText();
            if(checkbox.isSelected()){
            	//ignore case
            	if(!searchIn.toLowerCase().contains(str.toLowerCase())){
            		FindStatus = false;
            		JOptionPane.showMessageDialog(null, "Not Found", "Unsuccessful Search", JOptionPane.ERROR_MESSAGE);
            		//break;
            	}
            	while(searchIn.toLowerCase().contains(str.toLowerCase())){
            		int index=searchIn.toLowerCase().indexOf(str.toLowerCase());
            		JOptionPane.showMessageDialog(null, "Found at "+index+" positon\nCursor is at the mentioned position", "Successful Search", JOptionPane.INFORMATION_MESSAGE);
            		jTextArea1.setCaretPosition(index);
            		String replaceString ="";
            		int i=0;
            		while(i<str.length()){
            			replaceString+="~";
            			i++;
            		}
            		searchIn = searchIn.substring(0, index)+replaceString+searchIn.substring(index+str.length(),searchIn.length());
            	}
            	if(FindStatus){
            		FindStatus = false;
            		JOptionPane.showMessageDialog(null, "No More Results Found", "Search Finished", JOptionPane.INFORMATION_MESSAGE);
            	}
            	
            }
            else{
            	if(!searchIn.contains(str)){
            		FindStatus = false;
            		JOptionPane.showMessageDialog(null, "Not Found", "Unsuccessful Search", JOptionPane.ERROR_MESSAGE);
            		//break;
            	}
            	while(searchIn.contains(str)){
            		int index=searchIn.toLowerCase().indexOf(str.toLowerCase());
            		JOptionPane.showMessageDialog(null, "Found at "+index+" positon\nCursor is at the mentioned position", "Successful Search", JOptionPane.INFORMATION_MESSAGE);
            		jTextArea1.setCaretPosition(index);
            		String replaceString ="";
            		int i=0;
            		while(i<str.length()){
            			replaceString+="~";
            			i++;
            		}
            		searchIn = searchIn.substring(0, index)+replaceString+searchIn.substring(index+str.length(),searchIn.length());
            	}
            	if(FindStatus){
            		FindStatus = false;
            		JOptionPane.showMessageDialog(null, "No More Results Found", "Search Finished", JOptionPane.INFORMATION_MESSAGE);
            	}
            	
            }
        	System.out.println(str);
        //}while(str!=null&&FindStatus);
    }                                          

    private void IndentOptionActionPerformed(java.awt.event.ActionEvent evt) {                                             
        boolean HashApperance = false;
        String s = jTextArea1.getText();
        for(int i=0;i<s.length();){
            if(s.charAt(i)=='\n'||s.charAt(i)=='\t'){
                s = s.substring(0,i)+s.substring(i+1,s.length());
            }
            else{
                i++;
            }
        }
        int tabCount=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='#'&&i<s.length()-1&&s.charAt(i+1)=='i'){
                HashApperance = true;
            }
            if(s.charAt(i)=='{'){
                
                tabCount++;
                String half1,half2;
                half1 = s.substring(0,i+1);
                half2 = s.substring(i+1,s.length());
                half1+='\n';
                int k=0;
                while(k<tabCount){
                    half1+="\t";
                    k++;
                }
                s = half1+half2;
                
            }
            else if(s.charAt(i)=='}'){
                
                String half1,half2;
                half1 = s.substring(0,i+1);
                half2 = s.substring(i+1,s.length());
                half1=half1.substring(0,i-1)+"}";
                half1+='\n';
                int k=0;
                tabCount--;
                while(k<tabCount){
                    half1+="\t";
                    k++;
                }
                s = half1+half2;
                
            }
            else if(s.charAt(i)==';'){
                 String half1,half2;
                half1 = s.substring(0,i+1);
                half2 = s.substring(i+1,s.length());
                half1+='\n';
                int k=0;
                while(k<tabCount){
                    half1+="\t";
                    k++;
                }
                s = half1+half2;
            }
            else if(s.charAt(i)=='>'&&HashApperance){
                String half1,half2;
                half1 = s.substring(0,i+1);
                half2 = s.substring(i+1,s.length());
                half1+='\n';
                s = half1+half2;
                HashApperance = false;
            }
            jTextArea1.setText(s);
        }
    }                                            

    private void GetHelpOptionActionPerformed(java.awt.event.ActionEvent evt) {                                              
        JOptionPane.showMessageDialog(null, "Open The ABOUT THE DEVELOPER and contact the developer for HELP ", "HELP", JOptionPane.INFORMATION_MESSAGE);
    }                                             

    private void AboutMeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        JOptionPane.showMessageDialog(null, "About The Developer\nXEdiTor is created, designed and developed by Harshit Sharma,\nCurrently an undergrad student of Environmental Engineering having keen interest in the realm of Computer Science at Indian School Of Mines Dhanbad\nContact At : harshit.sharma2407@gmail.com", "About The Developer", JOptionPane.PLAIN_MESSAGE);
    }                                       

    private void SetNimbusThemeActionPerformed(java.awt.event.ActionEvent evt) {                                               
        // TODO add your handling code here:
    }                                              

    private void SetWindowsThemeActionPerformed(java.awt.event.ActionEvent evt) {                                                
        // TODO add your handling code here:
    }                                               

    private void SetWindowsClassicThemeActionPerformed(java.awt.event.ActionEvent evt) {                                                       
        // TODO add your handling code here:
    }                                                      

    private void SetMetalThemeActionPerformed(java.awt.event.ActionEvent evt) {                                              
        // TODO add your handling code here:
    }                                             

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XEdiTor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XEdiTor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XEdiTor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XEdiTor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XEdiTor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem AboutMe;
    private javax.swing.JMenu AboutMenu;
    private javax.swing.JMenu CodeMenu;
    private javax.swing.JMenuItem CopyOption;
    private javax.swing.JMenuItem CutOption;
    private javax.swing.JMenuItem DeleteOption;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem ExitOption;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuItem FindOption;
    private javax.swing.JMenuItem GetHelpOption;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JMenuItem IndentOption;
    private javax.swing.JMenuItem NewOption;
    private javax.swing.JMenuItem OpenOption;
    private javax.swing.JMenuItem PasteOption;
    private javax.swing.JMenuItem RedoOption;
    private javax.swing.JMenuItem SaveOption;
    private javax.swing.JRadioButtonMenuItem SetMetalTheme;
    private javax.swing.JRadioButtonMenuItem SetNimbusTheme;
    private javax.swing.JRadioButtonMenuItem SetWindowsClassicTheme;
    private javax.swing.JRadioButtonMenuItem SetWindowsTheme;
    private javax.swing.JMenu ThemeMenu;
    private javax.swing.JMenuItem UndoOption;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration                   
}
